// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: songService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SongService service

func NewSongServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SongService service

type SongService interface {
	UploadSong(ctx context.Context, in *CreateSongRequest, opts ...client.CallOption) (*CreateSongResponse, error)
	FindSongs(ctx context.Context, in *FindSongsRequest, opts ...client.CallOption) (*FindSongsResponse, error)
	DownloadSong(ctx context.Context, in *DownloadSongRequest, opts ...client.CallOption) (*DownloadSongResponse, error)
}

type songService struct {
	c    client.Client
	name string
}

func NewSongService(name string, c client.Client) SongService {
	return &songService{
		c:    c,
		name: name,
	}
}

func (c *songService) UploadSong(ctx context.Context, in *CreateSongRequest, opts ...client.CallOption) (*CreateSongResponse, error) {
	req := c.c.NewRequest(c.name, "SongService.UploadSong", in)
	out := new(CreateSongResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songService) FindSongs(ctx context.Context, in *FindSongsRequest, opts ...client.CallOption) (*FindSongsResponse, error) {
	req := c.c.NewRequest(c.name, "SongService.FindSongs", in)
	out := new(FindSongsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songService) DownloadSong(ctx context.Context, in *DownloadSongRequest, opts ...client.CallOption) (*DownloadSongResponse, error) {
	req := c.c.NewRequest(c.name, "SongService.DownloadSong", in)
	out := new(DownloadSongResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SongService service

type SongServiceHandler interface {
	UploadSong(context.Context, *CreateSongRequest, *CreateSongResponse) error
	FindSongs(context.Context, *FindSongsRequest, *FindSongsResponse) error
	DownloadSong(context.Context, *DownloadSongRequest, *DownloadSongResponse) error
}

func RegisterSongServiceHandler(s server.Server, hdlr SongServiceHandler, opts ...server.HandlerOption) error {
	type songService interface {
		UploadSong(ctx context.Context, in *CreateSongRequest, out *CreateSongResponse) error
		FindSongs(ctx context.Context, in *FindSongsRequest, out *FindSongsResponse) error
		DownloadSong(ctx context.Context, in *DownloadSongRequest, out *DownloadSongResponse) error
	}
	type SongService struct {
		songService
	}
	h := &songServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SongService{h}, opts...))
}

type songServiceHandler struct {
	SongServiceHandler
}

func (h *songServiceHandler) UploadSong(ctx context.Context, in *CreateSongRequest, out *CreateSongResponse) error {
	return h.SongServiceHandler.UploadSong(ctx, in, out)
}

func (h *songServiceHandler) FindSongs(ctx context.Context, in *FindSongsRequest, out *FindSongsResponse) error {
	return h.SongServiceHandler.FindSongs(ctx, in, out)
}

func (h *songServiceHandler) DownloadSong(ctx context.Context, in *DownloadSongRequest, out *DownloadSongResponse) error {
	return h.SongServiceHandler.DownloadSong(ctx, in, out)
}
